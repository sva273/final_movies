from typing import List, Dict, Any, Optional, Tuple
from prettytable import PrettyTable
from mysql_connector import get_min_max_years_for_genre, get_genre_movie_count

def paginate_results(
    results: List[Dict[str, Any]],
    page_size: int = 10,
    columns: Optional[List[str]] = None,
) -> None:
    """
    –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ PrettyTable.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    - 'n': —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    - 'p': –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    - 'g <–Ω–æ–º–µ—Ä>': –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    - 'q': –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

    :param results: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ (–∫–∞–∂–¥—ã–π ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ title, release_year, rating –∏ —Ç.–ø.)
    :param page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤, –≤—ã–≤–æ–¥–∏–º—ã—Ö –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    :param columns: –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —Å–ø–∏—Å–æ–∫
    if not isinstance(results, list):
        print("‚ö†Ô∏è Invalid data passed to paginate_results: expected a list.")
        return

    total_pages = (len(results) + page_size - 1) // page_size
    if total_pages == 0:
        print("‚ö†Ô∏è No data to display.")
        return

    page = 0

    while True:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start = page * page_size
        end = start + page_size
        page_results = results[start:end]

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table = PrettyTable()
        # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫: –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ, –ª–∏–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        table.field_names = columns or ["#", "Title", "Release Year", "Rating"]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É —Å —É—á—ë—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        for idx, movie in enumerate(page_results, start=1 + start):
            row = [
                idx,
                movie.get("title", "N/A"),
                movie.get("release_year", "N/A"),
                movie.get("rating", "N/A"),
            ]
            table.add_row(row)

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ —Å–∞–º–æ–π —Ç–∞–±–ª–∏—Ü—ã
        print(f"\n=== Found {len(results)} movies | Page {page + 1} of {total_pages} ===")
        print(table)
        try:
            command = (
                input("Enter command (n = next, p = prev, g <number> = go to, q = quit): ")
                .strip()
                .lower()
            )
        except KeyboardInterrupt:
            print("\n‚ùå Interrupted by user. Exiting pagination.")
            break

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞–ª Enter ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
        if not command:
            print("‚ö†Ô∏è Please enter a command (n, p, g <number>, or q).")
            continue

        elif command == "n":
            # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if page + 1 < total_pages:
                page += 1
            else:
                print("‚úÖ Already on the last page.")
        elif command == "p":
            # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if page > 0:
                page -= 1
            else:
                print("‚úÖ Already on the first page.")
        elif command.startswith("g "):
            # –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            try:
                target = int(command.split()[1]) - 1
                if 0 <= target < total_pages:
                    page = target
                else:
                    print("‚ö†Ô∏è Invalid page number.")
            except ValueError:
                print("‚ö†Ô∏è Please enter a valid page number after 'g'.")
        elif command == "q":
            # –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä
            break
        else:
            # –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            print("‚ö†Ô∏è Invalid command.")

def display_genre_table(genres: List[Dict[str, Any]]) -> Dict[int, Tuple[int, int, str]]:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∂–∞–Ω—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∏–ª—å–º–æ–≤ –∏ –≥–æ–¥–∞–º–∏ –≤—ã–ø—É—Å–∫–∞.
    –¢–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∂–∞–Ω—Ä—É.

    :param genres: –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ (–∫–∞–∂–¥—ã–π –∂–∞–Ω—Ä ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å genre_id –∏ name)
    :return: –°–ª–æ–≤–∞—Ä—å: genre_id ‚Üí (min_year, max_year, name)
    """
    table = PrettyTable(["ID", "Genre", "Years", "Count"])
    genre_data = Dict[int, Tuple[int, int, str]] = {}

    for g in genres:
        genre_id = g["genre_id"]
        name = g["name"]
        min_year, max_year = get_min_max_years_for_genre(genre_id)
        count = get_genre_movie_count(genre_id)
        genre_data[genre_id] = (min_year, max_year, name)
        table.add_row([genre_id, name, f"{min_year}-{max_year}", count])

    print("\nüé¨ Available genres:")
    print(table)

    return genre_data


def display_ratings_table(ratings: Dict[str, str]) -> Dict[int, str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É MPAA-—Ä–µ–π—Ç–∏–Ω–≥–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ ‚Üí –∫–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä. 1 ‚Üí "G").
    """
    table = PrettyTable(["#", "Code", "Description"])
    index_to_code = {}

    for idx, (code, description) in enumerate(ratings.items(), start=1):
        table.add_row([idx, code, description])
        index_to_code[idx] = code

    print("\nüéû Available MPAA Ratings:")
    print(table)

    return index_to_code