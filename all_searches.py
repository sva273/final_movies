from typing import Dict, Tuple
from dotenv import load_dotenv
from prettytable import PrettyTable
from mysql_connector import (
    search_movies,  # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
    get_min_max_years_for_genre,  # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω/–º–∞–∫—Å –≥–æ–¥–æ–≤ –ø–æ –∂–∞–Ω—Ä—É
    get_all_genres,  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    get_genre_movie_count,  # –ü–æ–¥—Å—á—ë—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–µ
)
from log_writer import log_search  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
from formatter import paginate_results  # –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –∫–æ–¥–æ–≤ MPAA
available_ratings: Dict[str, str] = {
    "G": "General Audiences ‚Äì All ages admitted",
    "PG": "Parental Guidance Suggested",
    "PG-13": "Parents Strongly Cautioned",
    "R": "Restricted",
    "NC-17": "Adults Only",
}


def select_genre() -> Tuple[int, Tuple[int, int], str]:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.

    –í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∂–∞–Ω—Ä–æ–≤ —Å –∏—Ö ID, –≥–æ–¥–∞–º–∏ –≤—ã–ø—É—Å–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∏–ª—å–º–æ–≤.
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    (genre_id, (min_year, max_year), genre_name)

    :return: –≤—ã–±—Ä–∞–Ω–Ω—ã–π genre_id, –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞
    """
    genres = get_all_genres()
    table = PrettyTable(["ID", "Genre", "Years", "Count"])
    genre_data = {}

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∂–∞–Ω—Ä–æ–≤
    for g in genres:
        genre_id = g["genre_id"]
        name = g["name"]
        min_year, max_year = get_min_max_years_for_genre(genre_id)
        count = get_genre_movie_count(genre_id)
        genre_data[genre_id] = (min_year, max_year, name)
        table.add_row([genre_id, name, f"{min_year}-{max_year}", count])

    print("\nüé¨ Available genres:")
    print(table)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö ID
    valid_ids = genre_data.keys()

    # –ó–∞–ø—Ä–æ—Å ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    while True:
        genre_id_input = input("Enter genre ID: ").strip()
        if genre_id_input.isdigit():
            genre_id = int(genre_id_input)
            if genre_id in genre_data:
                min_year, max_year, genre_name = genre_data[genre_id]
                return genre_id, (min_year, max_year), genre_name

        print(
            f"Invalid genre ID. Please enter one of: {', '.join(map(str, valid_ids))}"
        )


def get_year_range(min_year: int, max_year: int) -> Tuple[int, int]:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.

    –¢—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –æ–±–∞ –≥–æ–¥–∞ –±—ã–ª–∏ —á–µ—Ç—ã—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    –∏ –≤—Ö–æ–¥–∏–ª–∏ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω min_year - max_year.

    :param min_year: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –≥–æ–¥
    :param max_year: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –≥–æ–¥
    :return: –∫–æ—Ä—Ç–µ–∂ (–≥–æ–¥_–Ω–∞—á–∞–ª–∞, –≥–æ–¥_–æ–∫–æ–Ω—á–∞–Ω–∏—è)
    """
    while True:
        year_from_input = input(f"Enter start year ({min_year}-{max_year}): ").strip()
        year_to_input = input(f"Enter end year ({min_year}-{max_year}): ").strip()
        if year_from_input.isdigit() and year_to_input.isdigit():
            year_from = int(year_from_input)
            year_to = int(year_to_input)
            if len(year_from_input) == 4 and len(year_to_input) == 4:
                if min_year <= year_from <= year_to <= max_year:
                    return year_from, year_to
        print("Invalid year range. Try again.")


def search_by_keyword_workflow() -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤.

    –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    keyword = input("Enter keyword to search for movies: ").strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤—ë–ª –Ω–∏—á–µ–≥–æ (–∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã), –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    if not keyword:
        print("‚ö†Ô∏è Keyword cannot be empty.")
        return

    # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    movies = search_movies(keyword=keyword)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    log_search("keyword", {"keyword": keyword.lower()}, len(movies))

    if not movies:
        print("üîç Nothing found for your request.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    paginate_results(movies)


def search_by_genre_and_year_workflow() -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∂–∞–Ω—Ä –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤, –∑–∞—Ç–µ–º –∏—â–µ—Ç —Ñ–∏–ª—å–º—ã.

    –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # –í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞
    genre_id, (min_year, max_year), genre_name = select_genre()

    # –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
    year_from, year_to = get_year_range(min_year, max_year)

    # –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    movies = search_movies(genre_id=genre_id, year_from=year_from, year_to=year_to)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    log_search(
        "genre_year",
        {
            "genre_name": genre_name,
            "genre_id": genre_id,
            "year_from": year_from,
            "year_to": year_to,
        },
        len(movies),
    )

    if not movies:
        print("üîç No movies found for this genre and year range.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    paginate_results(movies)


def search_by_rating_workflow() -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ MPAA —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω
    –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É.

    –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    print("\nAvailable MPAA Ratings:")
    ratings_list = list(available_ratings.items())

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    for idx, (code, desc) in enumerate(available_ratings.items(), 1):
        print(f"{idx}. {code} - {desc}")

    # –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    while True:
        choice = input("Select a rating by number: ").strip()
        if choice.isdigit():
            index = int(choice)
            if 1 <= index <= len(available_ratings):
                selected_rating = list(available_ratings.keys())[index - 1]
                break

        print(
            f"Invalid selection. Please enter a number between 1 and {len(ratings_list)}."
        )

    # –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    movies = search_movies(rating=selected_rating)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    log_search("rating", {"rating": selected_rating}, len(movies))

    if not movies:
        print("üîç No movies found for the selected rating.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    paginate_results(movies)
