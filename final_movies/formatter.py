from typing import List, Dict, Any, Optional, Tuple
from prettytable import PrettyTable
from final_movies.mysql_connector import get_min_max_years_for_genre, get_genre_movie_count


def paginate_results(
    results: List[Dict[str, Any]],
    page_size: int = 10,
    columns: Optional[List[str]] = None,
) -> None:
    """
    –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ PrettyTable.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    - 'n': —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    - 'p': –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    - 'g <–Ω–æ–º–µ—Ä>': –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    - 'q': –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

    :param results: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ (–∫–∞–∂–¥—ã–π ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ title, release_year, rating –∏ —Ç.–ø.)
    :param page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤, –≤—ã–≤–æ–¥–∏–º—ã—Ö –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    :param columns: –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–∏—à—ë–ª —Å–ø–∏—Å–æ–∫ ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
    if not isinstance(results, list):
        print("‚ö†Ô∏è Invalid data passed to paginate_results: expected a list.")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –æ–∫—Ä—É–≥–ª—è—è –≤–≤–µ—Ä—Ö
    total_pages = (len(results) + page_size - 1) // page_size
    if total_pages == 0:
        print("‚ö†Ô∏è No data to display.")
        return

    page = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–Ω–¥–µ–∫—Å 0)

    while True:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start = page * page_size
        end = start + page_size
        page_results = results[start:end]

        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç PrettyTable –∏ –∑–∞–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        table = PrettyTable()
        table.field_names = columns or ["#", "Title", "Release Year", "Rating"]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Ñ–∏–ª—å–º—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        for idx, movie in enumerate(page_results, start=1 + start):
            row = [
                idx,  # –ù–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
                movie.get("title", "N/A"),  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ "N/A", –µ—Å–ª–∏ –Ω–µ—Ç
                movie.get("release_year", "N/A"),  # –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏–ª–∏ "N/A"
                movie.get("rating", "N/A"),  # –†–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ "N/A"
            ]
            table.add_row(row)

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–∏–ª—å–º–æ–≤, —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ —Ç–∞–±–ª–∏—Ü—É
        print(
            f"\n=== Found {len(results)} movies | Page {page + 1} of {total_pages} ==="
        )
        print(table)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command = (
            input(
                "Enter command (n = next, p = prev, g <number> = go to, q = quit): "
            )
            .strip()
            .lower()
        )

        if not command:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Enter –±–µ–∑ –≤–≤–æ–¥–∞ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
            print("‚ö†Ô∏è Please enter a command (n, p, g <number>, or q).")
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        if command == "n":
            if page + 1 < total_pages:
                page += 1
            else:
                print("‚úÖ Already on the last page.")
        elif command == "p":
            if page > 0:
                page -= 1
            else:
                print("‚úÖ Already on the first page.")
        elif command.startswith("g "):
            try:
                target = int(command.split()[1]) - 1  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫ –∏–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if 0 <= target < total_pages:
                    page = target  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                else:
                    print(f"‚ö†Ô∏è Page number must be between 1 and {total_pages}.")
            except ValueError:
                print("‚ö†Ô∏è Please enter a valid page number after 'g'.")
        elif command == "q":
            break  # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        else:
            print("‚ö†Ô∏è Invalid command.")


def print_pretty_table(
    headers: List[str], rows: List[List[Any]], title: str = ""
) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.

    :param headers: –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤.
    :param rows: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è ‚Äî —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π.
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).
    """
    if title:
        print(f"\n{title}")  # –ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    table = PrettyTable(headers)  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    for row in rows:
        table.add_row(row)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    print(table)  # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É


def display_genre_table(
    genres: List[Dict[str, Any]],
) -> Dict[int, Tuple[int, int, str]]:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∂–∞–Ω—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∏–ª—å–º–æ–≤ –∏ –≥–æ–¥–∞–º–∏ –≤—ã–ø—É—Å–∫–∞.
    –¢–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∂–∞–Ω—Ä—É.

    :param genres: –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ (–∫–∞–∂–¥—ã–π –∂–∞–Ω—Ä ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å genre_id –∏ name)
    :return: –°–ª–æ–≤–∞—Ä—å: genre_id ‚Üí (min_year, max_year, name)
    """
    genre_data: Dict[int, Tuple[int, int, str]] = (
        {}
    )  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∂–∞–Ω—Ä–∞—Ö
    rows = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã

    for g in genres:
        genre_id = g["genre_id"]  # ID –∂–∞–Ω—Ä–∞
        name = g["name"]  # –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
        min_year, max_year = get_min_max_years_for_genre(genre_id)
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º –∂–∞–Ω—Ä–µ
        count = get_genre_movie_count(genre_id)
        genre_data[genre_id] = (min_year, max_year, name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å –∂–∞–Ω—Ä–æ–º, –≥–æ–¥–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∏–ª—å–º–æ–≤
        rows.append([genre_id, name, f"{min_year}-{max_year}", count])

    # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –∂–∞–Ω—Ä–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    print_pretty_table(
        ["ID", "Genre", "Years", "Count"], rows, title="üé¨ Available genres:"
    )
    return genre_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è


def display_ratings_table(ratings: Dict[str, str]) -> Dict[int, str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É MPAA-—Ä–µ–π—Ç–∏–Ω–≥–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ ‚Üí –∫–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä. 1 ‚Üí "G").
    """
    index_to_code = {}
    table = PrettyTable()
    # –ü–æ–¥–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Description –≤—Ä—É—á–Ω—É—é —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
    desc_header = "Description"
    desc_width = max(len(desc_header), max(len(d) for d in ratings.values()))
    centered_desc = desc_header.center(desc_width)

    table.field_names = ["‚Ññ", "Code", centered_desc]

    # –¶–µ–Ω—Ç—Ä –¥–ª—è Code –∏ ‚Ññ, –ª–µ–≤—ã–π –∫—Ä–∞–π –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
    table.align["‚Ññ"] = "c"
    table.align["Code"] = "c"
    table.align[centered_desc] = "l"  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é

    for idx, (code, description) in enumerate(ratings.items(), start=1):
        table.add_row([idx, code, description])
        index_to_code[idx] = code

    print("üéû Available MPAA Ratings:")
    print(table)
    return index_to_code
